var _user$project$Main$asMaybe = F2(
	function (fn, v) {
		return A2(_elm_lang$core$Maybe$map, fn, v);
	});
var _user$project$Main$css = function (href) {
	return A3(
		_elm_lang$html$Html$node,
		'link',
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$rel('stylesheet'),
				_elm_lang$html$Html_Attributes$href(href)
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Main$toDict = function (list) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			list));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AddOption':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							formOptions: A3(_elm_lang$core$Dict$insert, model.uid, _user$project$FormOption$new, model.formOptions),
							uid: model.uid + 1
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'UpdateOption':
				var _p3 = _p0._1;
				var _p2 = _p0._0;
				var _p1 = _p3;
				if (_p1.ctor === 'Remove') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								formOptions: A2(_elm_lang$core$Dict$remove, _p2, model.formOptions)
							}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								formOptions: A3(
									_elm_lang$core$Dict$update,
									_p2,
									_elm_lang$core$Maybe$map(
										_user$project$FormOption$update(_p3)),
									model.formOptions)
							}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				}
			case 'FetchSuccess':
				var _p4 = _p0._0;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							formOptions: A2(
								_elm_lang$core$Debug$log,
								'hello',
								_user$project$Main$toDict(_p4)),
							uid: _elm_lang$core$List$length(_p4)
						}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	});
var _user$project$Main$Model = F2(
	function (a, b) {
		return {formOptions: a, uid: b};
	});
var _user$project$Main$UpdateOption = F2(
	function (a, b) {
		return {ctor: 'UpdateOption', _0: a, _1: b};
	});
var _user$project$Main$viewFormOption = function (_p5) {
	var _p6 = _p5;
	return A2(
		_elm_lang$html$Html_App$map,
		_user$project$Main$UpdateOption(_p6._0),
		_user$project$FormOption$formOption(_p6._1));
};
var _user$project$Main$AddOption = {ctor: 'AddOption'};
var _user$project$Main$addOption = A2(
	_elm_lang$html$Html$div,
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html_Attributes$class('add-form-option'),
			_elm_lang$html$Html_Events$onClick(_user$project$Main$AddOption)
		]),
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html$text('+')
		]));
var _user$project$Main$formOptionList = function (formOptions) {
	return A2(
		_elm_lang$html$Html$ul,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('form-options')
			]),
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$map, _user$project$Main$viewFormOption, formOptions),
			_elm_lang$core$Native_List.fromArray(
				[_user$project$Main$addOption])));
};
var _user$project$Main$Save = {ctor: 'Save'};
var _user$project$Main$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$Main$FetchSuccess = function (a) {
	return {ctor: 'FetchSuccess', _0: a};
};
var _user$project$Main$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	A2(_user$project$Main$Model, _elm_lang$core$Dict$empty, 0),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(_user$project$Requests$getFormOptions, _user$project$Main$FetchFail, _user$project$Main$FetchSuccess)
		]));
var _user$project$Main$Fetch = {ctor: 'Fetch'};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$form,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Events$onSubmit(_user$project$Main$NoOp)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$css('static/styles/form.css'),
				_user$project$Main$css('static/styles/fonts.css'),
				A2(
				_elm_lang$html$Html$h1,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Aanvraag prijsopgave website')
					])),
				_user$project$Main$formOptionList(
				_elm_lang$core$Dict$toList(model.formOptions)),
				A2(
				_elm_lang$html$Html$pre,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(model))
					]))
			]));
};
var _user$project$Main$main = {
	main: _jinjor$elm_time_travel$TimeTravel_Html_App$program(
		{
			init: _user$project$Main$init,
			update: _user$project$Main$update,
			view: _user$project$Main$view,
			subscriptions: function (_p7) {
				return _elm_lang$core$Platform_Sub$none;
			}
		})
};
